    -- MySQL Script generated by MySQL Workbench
    -- Sat Jul 29 12:35:06 2017
    -- Model: New Model    Version: 1.0
    -- MySQL Workbench Forward Engineering

    SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
    SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
    SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

    -- -----------------------------------------------------
    -- Schema dbo
    -- -----------------------------------------------------

    -- -----------------------------------------------------
    -- Schema dbo
    -- -----------------------------------------------------
    CREATE SCHEMA IF NOT EXISTS `dbo` DEFAULT CHARACTER SET utf8 ;
    USE `dbo` ;


    -- -----------------------------------------------------
    -- Table `dbo`.`Field`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Field`;


    CREATE TABLE IF NOT EXISTS `dbo`.`Field` (
      `idField` INT NOT NULL AUTO_INCREMENT,
      `category` VARCHAR(64) NOT NULL,
      `atribute` VARCHAR(64) NOT NULL,
      `weight` DECIMAL(10,4) NOT NULL DEFAULT 0.0000,
      `html_id` VARCHAR(64) NULL,
      `html_name` VARCHAR(64) NULL,
      `html_row_count` INT NULL DEFAULT 1,
      `html_label` VARCHAR(64) NULL,
      `html_placeholder` VARCHAR(64) NULL,
      `html_info` VARCHAR(128) NULL,
      `html_code` VARCHAR(2048) NULL,
      PRIMARY KEY (`idField`),
      UNIQUE INDEX `idField_UNIQUE` (`idField` ASC)
      )
    ENGINE = InnoDB;

    USE `dbo` ;

    -- -----------------------------------------------------
    -- Placeholder table for view `dbo`.`view1`
    -- -----------------------------------------------------
    CREATE TABLE IF NOT EXISTS `dbo`.`view1` (`id` INT);

    -- -----------------------------------------------------
    -- View `dbo`.`view1`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`view1`;
    USE `dbo`;




    -- Field
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('1', 'Study identification', 'Title', '0.00', 'title', 'title', '1', 'Title', 'Please enter with Title', 'The Title of the project published');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('2', 'Study identification', 'Year', '0.00', 'year', 'year', '1', 'Year', '', 'Year that the article was published');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('3', 'Study identification', 'Bibliografic Reference (BibTex)', '0.00', 'bibtex', 'bibtex', '3', 'Bibliografic reference (Bibtex)', 'Please enter with Bibliografic reference (Bibtex)', '');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('4', 'Study identification', 'Link (URL)', '0.00', 'link', 'link', '1', 'Link (URL)', 'Please enter with Link (URL)', 'Link to the article');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('5', 'Programming model', 'Execution platform', '0.0680', 'executionPlatform', 'executionPlatform', '1', 'Execution platform', 'Please enter with Execution platformm', 'Execution platform that the software under test executes');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('6', 'Programming model', 'Objective', '0.00', 'objective', 'objective', '1', 'Context/Objective', 'Please enter with Context/Objective', 'Context/objective of the concurrent software');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('7', 'Programming model', 'Programming language', '0.0573', 'programmingLanguage', 'programmingLanguage', '1', 'Programming Language/Runtime libraries', 'Please enter with Programming language', 'Programming language and/or runtime libraries that the software under testing was developed');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('8', 'General testing characteristics', 'Testing technique', '0.0738', 'testingTechnique', 'testingTechnique', '1', 'Testing technique', 'Please enter with Testing Technique', 'Type of testing technique proposed');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('9', 'General testing characteristics', 'Test data generation', '0.00', 'testDataGeneration', 'testDataGeneration', '1', 'Test data generation', 'Please enter with Test data generation', 'Synchronization interleaving mechanism');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('10', 'General testing characteristics', 'Testing level', '0.0689', 'testingLevel', 'testingLevel', '1', 'Testing level', 'Please enter with Testing level', 'Testing level that the technique was applied');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('11', 'General testing characteristics', 'Synchronization mechanism', '0.0689', 'synchronizationMechanism', 'synchronizationMechanism', '1', 'Synchronization interleaving mechanism', 'Please enter with Synchronization interleaving mechanism', 'Development Context/Objective of the software under testing');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('12', 'General testing characteristics', 'Input', '0.0641', 'input', 'input', '1', 'Inputs required', 'Please enter with Input', 'Expected input for a test case');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('13', 'General testing characteristics', 'Output', '0.0670', 'output', 'output', '2', 'Output/Response variable', 'Please enter with Output/Response variable', 'Expected output for a test case');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('14', 'General testing characteristics', 'Quality attribute', '0.0777', 'qualityAttribute', 'qualityAttribute', '1', 'Quality attributes', 'Please enter with Quality attribute', 'Software quality characteristic that the technique is able to evaluate');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('15', 'General testing characteristics', 'Type of study', '0.00', 'typeOfStudy', 'typeOfStudy', '1', 'Type of study', 'Please enter with Type of study', 'Type of empirical study applied to validate teh testing technique');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('16', 'Concurrent testing characteristics', 'Testing analysis', '0.0641', 'testingAnalysis', 'testingAnalysis', '1', 'Testing analysis', 'Please enter with Testing analysis', 'Type of analysis used by the technique ');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('17', 'Concurrent testing characteristics', 'Concurrent paradigm', '0.0592', 'concurrentParadigm', 'concurrentParadigm', '1', 'Concurrent paradigm for process interaction', 'Please enter with Concurrent paradigm', 'Concurrent paradigm for process interaction');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('18', 'Concurrent testing characteristics', 'Replay mechanism', '0.0602', 'replayMechanism', 'replayMechanism', '1', 'Replay mechanism', 'Please enter with Replay mechanism', 'Type of replay mechanism used to re-execute the program during the testing');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('19', 'Concurrent testing characteristics', 'Program representation', '0.00', 'programRepresentation', 'programRepresentation', '1', 'Program representation', 'Please enter with Program representation', 'The program representation that captures the relevant information to the testing');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('20', 'Concurrent testing characteristics', 'Instrumentation', '0.00', 'instrumentation', 'instrumentation', '1', 'Instrumentation', '', '');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('21', 'Concurrent testing characteristics', 'State space reduction', '0.0592', 'stateSpaceReduction', 'stateSpaceReduction', '1', 'State space reduction', 'Please enter with State space reduction', 'The technique used to treat the state explosion problem');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('22', 'Concurrent testing characteristics', 'Concurrent bugs', '0.0777', 'concurrentBugs', 'concurrentBugs', '1', 'Concurrent bugs', 'Please enter with Concurrent bugs', 'The type of concurrent bugs identified by the testing technique');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('23', 'Testing tool support', 'Tool name', '0.0670', 'toolName', 'toolName', '1', 'Tool name', 'Please enter with Tool name', 'Name of the tool if the technique presents one');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('24', 'Testing tool support', 'Cost', '0.00', 'cost', 'cost', '1', 'Cost', 'Please enter with Cost', 'The cost associated with the tool');
    INSERT INTO `dbo`.`Field` (`idField`, `category`, `atribute`, `weight`, `html_id`, `html_name`, `html_row_count`, `html_label`, `html_placeholder`, `html_info`) VALUES ('25', 'Testing tool support', 'PlatformTool', '0.00', 'platformTool', 'platformTool', '1', 'Platform that the tool operates', 'Please enter with Platform Tool', 'The execution platform that the tool operates');





    -- -----------------------------------------------------
    -- Table `dbo`.`Technique`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Technique`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Technique` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `title` VARCHAR(255) NOT NULL,
      `year` INT NOT NULL,
      `bibTex` VARCHAR(10000) NULL,
      `link` VARCHAR(2048) NULL,
      `needApproval` INT NOT NULL DEFAULT 1,
      `insertedBy` VARCHAR(128) NOT NULL DEFAULT 'admin',
      `insertedOn` DATETIME NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      UNIQUE INDEX `title_UNIQUE` (`title` ASC))
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`Technique`
    (`id`,
    `title`,
    `year`,
    `bibTex`,
    `link`,
    `needApproval`,
    `insertedBy`,
    `insertedOn`)
    VALUES
    (1,
    'An Empirical Evaluation of the Cost and Effectiveness of Structural Testing Criteria for Concurrent Programs',
    2013,
    '"@inproceedings{2,
      added-at = {2013-06-05T00:00:00.000+0200},
      author = {Brito, Maria A. S. and do Rocio Senger de Souza, Simone and de Souza, Paulo Sergio Lopes},
      biburl = {http://www.bibsonomy.org/bibtex/21935ffea5917ab7825789e25d985a931/dblp},
      booktitle = {ICCS},
      crossref = {conf/iccS/2013},
      editor = {Alexandrov, Vassil N. and Lees, Michael and Krzhizhanovskaya, Valeria V. and Dongarra, Jack and Sloot, Peter M. A.},
      ee = {http://dx.doi.org/10.1016/j.procs.2013.05.188},
      interhash = {},
      intrahash = {1935ffea5917ab7825789e25d985a931},
      keywords = {dblp},
      pages = {250-259},
      publisher = {Elsevier},
      series = {Procedia Computer Science},
      timestamp = {2015-06-18T11:52:32.000+0200},
      title = {An Empirical Evaluation of the Cost and Effectiveness of Structural Testing Criteria for Concurrent Programs.},
      url = {http://dblp.uni-trier.de/db/conf/iccS/iccS2013.html#BritoSS13},
      volume = 18,
      year = 2013
    }"',
    'www.sciencedirect.com/science/article/pii/S1877050913003311',
    0,
    'admin',
    NOW());

    INSERT INTO `dbo`.`Technique` 
    (`id`, 
    `title`, 
    `year`, 
    `bibTex`, 
    `link`, 
    `needApproval`, 
    `insertedBy`, 
    `insertedOn`) 
    VALUES 
    (2, 
    'Empirical evaluation of a new composite approach to the coverage criteria and reachability testing of concurrent programs', 
    '2014', 
    '"@article {27,
      author = {Souza, S. R. S. and Souza, P. S. L. and Brito, M. A. S. and Simao, A. S. and Zaluska, E. J.},
      title = {Empirical evaluation of a new composite approach to the coverage criteria and reachability testing of concurrent programs},
      journal = {Software Testing, Verification and Reliability},
      volume = {25},
      number = {3},
      issn = {1099-1689},
      url = {http://dx.doi.org/10.1002/stvr.1568},
      doi = {10.1002/stvr.1568},
      pages = {310--332},
      keywords = {structural testing, reachability testing, concurrent programs, experimental study},
      year = {2015},
    }"',
    'onlinelibrary.wiley.com/doi/10.1002/stvr.1568/abstract',
    0,
    'admin',
    NOW());




    -- -----------------------------------------------------
    -- Table `dbo`.`ExecutionPlatform`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ExecutionPlatform`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ExecutionPlatform` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `executionPlatform` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_1`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;



    INSERT INTO `dbo`.`ExecutionPlatform`  (`id`,  `idTechnique`,  `executionPlatform`)  VALUES  (1,  1,  'Linux');
    INSERT INTO `dbo`.`ExecutionPlatform`  (`id`,  `idTechnique`,  `executionPlatform`)  VALUES  (2,  2,  'Linux');




    -- -----------------------------------------------------
    -- Table `dbo`.`Objective`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Objective`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Objective` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `objective` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_2`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`Objective` (`id`,  `idTechnique`,  `objective`)  VALUES  (1,  1,  'Process');
    INSERT INTO `dbo`.`Objective` (`id`,  `idTechnique`,  `objective`)  VALUES  (2,  1,  'HPC');
    INSERT INTO `dbo`.`Objective` (`id`,  `idTechnique`,  `objective`)  VALUES  (3,  2,  'Process');
    INSERT INTO `dbo`.`Objective` (`id`,  `idTechnique`,  `objective`)  VALUES  (4,  2,  'HPC');


    -- -----------------------------------------------------
    -- Table `dbo`.`ProgrammingLanguage`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ProgrammingLanguage`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ProgrammingLanguage` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `programmingLanguage` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_3`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`ProgrammingLanguage` (`id`,  `idTechnique`,  `programmingLanguage`)  VALUES  (1,  1,  'C');
    INSERT INTO `dbo`.`ProgrammingLanguage` (`id`,  `idTechnique`,  `programmingLanguage`)  VALUES  (2,  1,  'MPI');
    INSERT INTO `dbo`.`ProgrammingLanguage` (`id`,  `idTechnique`,  `programmingLanguage`)  VALUES  (3,  2,  'C');
    INSERT INTO `dbo`.`ProgrammingLanguage` (`id`,  `idTechnique`,  `programmingLanguage`)  VALUES  (4,  2,  'MPI');




    -- -----------------------------------------------------
    -- Table `dbo`.`TestingTechnique`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`TestingTechnique`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`TestingTechnique` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `testingTechnique` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_4`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`TestingTechnique` (`id`,  `idTechnique`,  `testingTechnique`)  VALUES  (1,  1,  'Structural testing');
    INSERT INTO `dbo`.`TestingTechnique` (`id`,  `idTechnique`,  `testingTechnique`)  VALUES  (2,  2,  'Structural testing');





    -- -----------------------------------------------------
    -- Table `dbo`.`TestDataGeneration`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`TestDataGeneration`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`TestDataGeneration` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `testDataGeneration` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_5`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`TestDataGeneration` (`id`,  `idTechnique`,  `testDataGeneration`)  VALUES  (1,  1,  'Guided for testing criteria');
    INSERT INTO `dbo`.`TestDataGeneration` (`id`,  `idTechnique`,  `testDataGeneration`)  VALUES  (2,  2,  'Guided for testing criteria');






    -- -----------------------------------------------------
    -- Table `dbo`.`TestingLevel`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`TestingLevel`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`TestingLevel` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `testingLevel` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_6`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`TestingLevel` (`id`,  `idTechnique`,  `testingLevel`)  VALUES  (1,  1,  'Unit');
    INSERT INTO `dbo`.`TestingLevel` (`id`,  `idTechnique`,  `testingLevel`)  VALUES  (2,  2,  'Unit');



    -- -----------------------------------------------------
    -- Table `dbo`.`SynchronizationMechanism`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`SynchronizationMechanism`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`SynchronizationMechanism` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `synchronizationMechanism` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_7`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`SynchronizationMechanism` (`id`,  `idTechnique`,  `synchronizationMechanism`)  VALUES  (1,  1,  'Execution trace');
    INSERT INTO `dbo`.`SynchronizationMechanism` (`id`,  `idTechnique`,  `synchronizationMechanism`)  VALUES  (2,  2,  'Reachability testing');



    -- -----------------------------------------------------
    -- Table `dbo`.`Input`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Input`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Input` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `input` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_8`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`Input` (`id`,  `idTechnique`,  `input`)  VALUES  (1,  1,  'Concurrent code in MPI');
    INSERT INTO `dbo`.`Input` (`id`,  `idTechnique`,  `input`)  VALUES  (2,  2,  'Concurrent code in MPI');




    -- -----------------------------------------------------
    -- Table `dbo`.`Output`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Output`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Output` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `output` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_9`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;



    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (1,  1, 'Number of test cases to cover a criterion');
    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (2,  1, 'Probability to satisfy a testing criterion using a test set adequate to another testing criterion' );
    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (3,  1, 'Percentage of defects detected');
    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (4,  2, 'Number of faults found');
    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (5,  2, 'Number of faults injected' );
    INSERT INTO `dbo`.`Output` (`id`,  `idTechnique`,  `output`)  VALUES  (6,  2, 'Number of SYN-sequences (or paths) executed for each approach.');



    -- -----------------------------------------------------
    -- Table `dbo`.`QualityAttribute`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`QualityAttribute`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`QualityAttribute` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `qualityAttribute` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_10`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;



    INSERT INTO `dbo`.`QualityAttribute` (`id`,  `idTechnique`,  `qualityAttribute`)  VALUES  (1,  1,  'Effectiveness');
    INSERT INTO `dbo`.`QualityAttribute` (`id`,  `idTechnique`,  `qualityAttribute`)  VALUES  (2,  1,  'Cost');
    INSERT INTO `dbo`.`QualityAttribute` (`id`,  `idTechnique`,  `qualityAttribute`)  VALUES  (3,  1,  'Strength');
    INSERT INTO `dbo`.`QualityAttribute` (`id`,  `idTechnique`,  `qualityAttribute`)  VALUES  (4,  2,  'Efficiency');
    INSERT INTO `dbo`.`QualityAttribute` (`id`,  `idTechnique`,  `qualityAttribute`)  VALUES  (5,  2,  'Effectiveness');



    -- -----------------------------------------------------
    -- Table `dbo`.`TypeOfStudy`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`TypeOfStudy`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`TypeOfStudy` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `typeOfStudy` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_11`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`TypeOfStudy` (`id`,  `idTechnique`,  `typeOfStudy`)  VALUES  (1,  1,  'Experiment');
    INSERT INTO `dbo`.`TypeOfStudy` (`id`,  `idTechnique`,  `typeOfStudy`)  VALUES  (2,  2,  'Experiment');



    -- -----------------------------------------------------
    -- Table `dbo`.`TestingAnalysis`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`TestingAnalysis`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`TestingAnalysis` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `testingAnalysis` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_12`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`TestingAnalysis` (`id`,  `idTechnique`,  `testingAnalysis`)  VALUES  (1,  1,  'Dynamic');
    INSERT INTO `dbo`.`TestingAnalysis` (`id`,  `idTechnique`,  `testingAnalysis`)  VALUES  (2,  2,  'Static');
    INSERT INTO `dbo`.`TestingAnalysis` (`id`,  `idTechnique`,  `testingAnalysis`)  VALUES  (3,  2,  'Dynamic');







    -- -----------------------------------------------------
    -- Table `dbo`.`ConcurrentParadigm`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ConcurrentParadigm`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ConcurrentParadigm` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `concurrentParadigm` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_13`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`ConcurrentParadigm` (`id`,  `idTechnique`,  `concurrentParadigm`)  VALUES  (1,  1,  'Message passing');
    INSERT INTO `dbo`.`ConcurrentParadigm` (`id`,  `idTechnique`,  `concurrentParadigm`)  VALUES  (2,  2,  'Message passing');






    -- -----------------------------------------------------
    -- Table `dbo`.`ReplayMechanism`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ReplayMechanism`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ReplayMechanism` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `replayMechanism` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_14`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`ReplayMechanism` (`id`,  `idTechnique`,  `replayMechanism`)  VALUES  (1,  1,  'Controlled execution');
    INSERT INTO `dbo`.`ReplayMechanism` (`id`,  `idTechnique`,  `replayMechanism`)  VALUES  (2,  2,  'SYN-sequences');



    -- -----------------------------------------------------
    -- Table `dbo`.`ProgramRepresentation`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ProgramRepresentation`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ProgramRepresentation` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `programRepresentation` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_15`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`ProgramRepresentation` (`id`,  `idTechnique`,  `programRepresentation`)  VALUES  (1,  1,  'Parallel Control Flow Graph (PCFG)');
    INSERT INTO `dbo`.`ProgramRepresentation` (`id`,  `idTechnique`,  `programRepresentation`)  VALUES  (2,  2,  'Parallel Control Flow Graph (PCFG)');




    -- -----------------------------------------------------
    -- Table `dbo`.`Instrumentation`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Instrumentation`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Instrumentation` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `instrumentation` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_16`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`Instrumentation` (`id`,  `idTechnique`,  `instrumentation`)  VALUES  (1,  1,  'Check-point insertion');
    INSERT INTO `dbo`.`Instrumentation` (`id`,  `idTechnique`,  `instrumentation`)  VALUES  (2,  2,  'Instrumentation');




    -- -----------------------------------------------------
    -- Table `dbo`.`StateSpaceReduction`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`StateSpaceReduction`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`StateSpaceReduction` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `stateSpaceReduction` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_17`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`StateSpaceReduction` (`id`,  `idTechnique`,  `stateSpaceReduction`)  VALUES  (1,  1,  'Check point insertion');
    INSERT INTO `dbo`.`StateSpaceReduction` (`id`,  `idTechnique`,  `stateSpaceReduction`)  VALUES  (2,  2,  'Feasible synchronization sequences');




    -- -----------------------------------------------------
    -- Table `dbo`.`ConcurrentBugs`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ConcurrentBugs`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ConcurrentBugs` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `concurrentBugs` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_18`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`ConcurrentBugs` (`id`,  `idTechnique`,  `concurrentBugs`)  VALUES  (1,  1,  'Mutation based errors');
    INSERT INTO `dbo`.`ConcurrentBugs` (`id`,  `idTechnique`,  `concurrentBugs`)  VALUES  (2,  2,  'Mutation based errors');








    -- -----------------------------------------------------
    -- Table `dbo`.`ToolName`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ToolName`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ToolName` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `toolName` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_19`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;



    INSERT INTO `dbo`.`ToolName` (`id`,  `idTechnique`,  `toolName`)  VALUES  (1,  1,  'ValiMPI');
    INSERT INTO `dbo`.`ToolName` (`id`,  `idTechnique`,  `toolName`)  VALUES  (2,  2,  'ValiMPI');







    -- -----------------------------------------------------
    -- Table `dbo`.`Cost`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`Cost`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`Cost` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `cost` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_20`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    INSERT INTO `dbo`.`Cost` (`id`,  `idTechnique`,  `cost`)  VALUES  (1,  1,  'Academic');
    INSERT INTO `dbo`.`Cost` (`id`,  `idTechnique`,  `cost`)  VALUES  (2,  2,  'Academic');




    -- -----------------------------------------------------
    -- Table `dbo`.`PlatformTool`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`PlatformTool`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`PlatformTool` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechnique` INT NOT NULL,
      `PlatformTool` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechnique_idx` (`idTechnique` ASC),
      CONSTRAINT `idTechnique_21`
        FOREIGN KEY (`idTechnique`)
        REFERENCES `dbo`.`Technique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    INSERT INTO `dbo`.`PlatformTool` (`id`,  `idTechnique`,  `platformTool`)  VALUES  (1,  1,  'Linux');
    INSERT INTO `dbo`.`PlatformTool` (`id`,  `idTechnique`,  `platformTool`)  VALUES  (2,  2,  'Linux');


    -- ID 3
    INSERT INTO `Technique` (`id`,`title`, `year`, `bibTex`, `link`, `needApproval`, `insertedBy`, `insertedOn`) VALUES (3, 'Comparative assessment of testing and model checking using program mutation', '2007', '@inproceedings{5,\r\nAuthor = {Jeremy S. Bradbury AND James R. Cordy AND Juergen Dingel},\r\nBooktitle = {Proc. of the 3rd Workshop on Mutation Analysis (Mutation 2007)},\r\nMonth = {Sept.},\r\nPages = {210-219},\r\nTitle = {Comparative Assessment of Testing and Model Checking Using Program Mutation},\r\nYear = {2007}}', 'ieeexplore.ieee.org/document/4344126/', 1, 'admin', '2017-07-30 11:51:07');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (3, 'Linux');
    INSERT INTO `Objective` (`idTechnique`, `objective`) VALUES (3, 'Multithreading');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (3, 'Java');
    INSERT INTO `TestingTechnique` (`idTechnique`, `testingTechnique`) VALUES (3, 'Fault-based testing');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (3, 'Mutation operators');
    INSERT INTO `TestingLevel` (`idTechnique`, `testingLevel`) VALUES (3, 'Unit');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (3, 'Synchronization events');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (3, 'Thread schedules');
    INSERT INTO `Input` (`idTechnique`, `input`) VALUES (3, 'Source code in Java');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (3, 'Number of faults detected');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (3, 'Effectiveness');
    INSERT INTO `TypeOfStudy` (`idTechnique`, `typeOfStudy`) VALUES (3, 'Experiment');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (3, 'Dynamic');
    INSERT INTO `ConcurrentParadigm` (`idTechnique`, `concurrentParadigm`) VALUES (3, 'Shared memory');
    INSERT INTO `ReplayMechanism` (`idTechnique`, `replayMechanism`) VALUES (3, 'Deterministic replay');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (3, 'No Information');
    INSERT INTO `Instrumentation` (`idTechnique`, `instrumentation`) VALUES (3, 'Manual instrumentation');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (3, 'Parallel randomized state-space search');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (3, 'Assertion violation');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (3, 'Deadlock');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (3, 'ExMan');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (3, 'Contest');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (3, 'JPF');
    INSERT INTO `Cost` (`idTechnique`, `cost`) VALUES (3, 'Academic');
    INSERT INTO `PlatformTool` (`idTechnique`, `platformTool`) VALUES (3, 'Linux');



    -- ID 4
    INSERT INTO `Technique` (`id`, `title`, `year`, `bibTex`, `link`, `needApproval`, `insertedBy`, `insertedOn`) VALUES (4 ,'Location pairs: a test coverage metric for shared-memory concurrent programs', '2012', '\"@article{10,\r\n author = {Serdar Tasiran and\r\n M. Erkan Keremoglu and\r\n Kivan{\\c{c}} Muslu},\r\n title = {Location pairs: a test coverage metric for shared-memory concurrent\r\n programs},\r\n journal = {Empirical Software Engineering},\r\n volume = {17},\r\n number = {3},\r\n pages = {129--165},\r\n year = {2012},\r\n url = {http://dx.doi.org/10.1007/s10664-011-9166-8},\r\n doi = {10.1007/s10664-011-9166-8},\r\n timestamp = {Fri, 24 Feb 2012 00:00:00 +0100},\r\n biburl = {http://dblp.uni-trier.de/rec/bib/journals/ese/TasiranKM12},\r\n bibsource = {dblp computer science bibliography, http://dblp.org}\r\n}\"', 'link.springer.com/article/10.1007/s10664-011-9166-8', 1, 'admin', '2017-07-30 12:04:00');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (4, 'No Information');
    INSERT INTO `Objective` (`idTechnique`, `objective`) VALUES (4, 'Multithreading');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (4, 'Java');
    INSERT INTO `TestingTechnique` (`idTechnique`, `testingTechnique`) VALUES (4, 'Structural testing');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (4, 'Coverage metric');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (4, 'Location Pair (LP)');
    INSERT INTO `TestingLevel` (`idTechnique`, `testingLevel`) VALUES (4, 'No Information');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (4, 'Location pairs');
    INSERT INTO `Input` (`idTechnique`, `input`) VALUES (4, 'Java bytecode');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (4, 'Test adequacy: percentage of iterations for which a metric was successful');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (4, 'Effectiveness');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (4, 'Efficiency');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (4, 'Scalability');
    INSERT INTO `TypeOfStudy` (`idTechnique`, `typeOfStudy`) VALUES (4, 'Case study');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (4, 'Static');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (4, 'Dynamic');
    INSERT INTO `ConcurrentParadigm` (`idTechnique`, `concurrentParadigm`) VALUES (4, 'Shared memory');
    INSERT INTO `ReplayMechanism` (`idTechnique`, `replayMechanism`) VALUES (4, 'Controlled thread schedule');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (4, 'Control flow graph (CFG)');
    INSERT INTO `Instrumentation` (`idTechnique`, `instrumentation`) VALUES (4, 'JPF instrumentator');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (4, 'State transition coverage');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (4, 'High-level concurrency errors');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (4, 'Atomicity violation');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (4, 'Refinement violations');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (4, 'Data race');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (4, 'Monitoring tool');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (4, 'JavaPathfinder');
    INSERT INTO `Cost` (`idTechnique`, `cost`) VALUES (4, 'Academic');
    INSERT INTO `PlatformTool` (`idTechnique`, `platformTool`) VALUES (4, 'No Information');


    -- ID 5
    INSERT INTO `Technique` (`id`, `title`, `year`, `bibTex`, `link`, `needApproval`, `insertedBy`, `insertedOn`) VALUES (5, 'Applications of Model Reuse When Using Estimation of Distribution Algorithms to Test Concurrent Software', '2011', '\"@inproceedings{99, \r\n author = {Staunton, Jan and Clark, John A.},\r\n title = {Applications of Model Reuse when Using Estimation of Distribution Algorithms to Test Concurrent Software},\r\n booktitle = {Proceedings of the Third International Conference on Search Based Software Engineering},\r\n series = {SSBSE\'11},\r\n year = {2011},\r\n isbn = {978-3-642-23715-7},\r\n location = {Szeged, Hungary},\r\n pages = {97--111},\r\n numpages = {15},\r\n url = {http://dl.acm.org/citation.cfm?id=2042243.2042260},\r\n acmid = {2042260},\r\n publisher = {Springer-Verlag},\r\n address = {Berlin, Heidelberg},\r\n} \r\n\"', 'www.ssbse.org/2011/presentations/.../Staunton_EDA.pdf', 1, 'admin', '2017-07-30 12:09:06');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (5, 'No Information');
    INSERT INTO `Objective` (`idTechnique`, `objective`) VALUES (5, 'Distributed systems');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (5, 'Java');
    INSERT INTO `TestingTechnique` (`idTechnique`, `testingTechnique`) VALUES (5, 'Model based testing');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (5, 'Search based testing');
    INSERT INTO `TestingLevel` (`idTechnique`, `testingLevel`) VALUES (5, 'System');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (5, 'Model reuse');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (5, 'Estimation distributed algorithm (EDA)');
    INSERT INTO `Input` (`idTechnique`, `input`) VALUES (5, 'System specification in LTL');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (5, 'Time in finding a error');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (5, 'Efficiency');
    INSERT INTO `TypeOfStudy` (`idTechnique`, `typeOfStudy`) VALUES (5, 'Case study');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (5, 'Dynamic');
    INSERT INTO `ConcurrentParadigm` (`idTechnique`, `concurrentParadigm`) VALUES (5, 'Shared memory');
    INSERT INTO `ReplayMechanism` (`idTechnique`, `replayMechanism`) VALUES (5, 'Model reuse');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (5, 'State space graph');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (5, 'ltl model');
    INSERT INTO `Instrumentation` (`idTechnique`, `instrumentation`) VALUES (5, 'No Information');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (5, 'Fitness functions');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (5, 'Heuristic mechanisms');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (5, 'Deadlock');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (5, 'Bugs inserted by the researcher');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (5, 'ECJ');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (5, 'HSF-SPIN');
    INSERT INTO `Cost` (`idTechnique`, `cost`) VALUES (5, 'No Information');
    INSERT INTO `PlatformTool` (`idTechnique`, `platformTool`) VALUES (5, 'No Information');


    -- ID 6
    INSERT INTO `Technique` (`id`, `title`, `year`, `bibTex`, `link`, `needApproval`, `insertedBy`, `insertedOn`) VALUES (6, 'Race Detection for Android Applications', '2015', '\"@article{91,\r\n author = {Maiya, Pallavi and Kanade, Aditya and Majumdar, Rupak},\r\n title = {Race Detection for Android Applications},\r\n journal = {SIGPLAN Not.},\r\n issue_date = {June 2014},\r\n volume = {49},\r\n number = {6},\r\n month = jun,\r\n year = {2014},\r\n issn = {0362-1340},\r\n pages = {316--325},\r\n numpages = {10},\r\n url = {http://doi.acm.org/10.1145/2666356.2594311},\r\n doi = {10.1145/2666356.2594311},\r\n acmid = {2594311},\r\n publisher = {ACM},\r\n address = {New York, NY, USA},\r\n keywords = {Android concurrency semantics, data races, happens-before reasoning},\r\n} \"', 'dl.acm.org/citation.cfm?id=2594311', 1, 'admin', '2017-07-30 12:12:46');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (6, 'Android');
    INSERT INTO `Objective` (`idTechnique`, `objective`) VALUES (6, 'Android applications');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (6, 'Java');
    INSERT INTO `TestingTechnique` (`idTechnique`, `testingTechnique`) VALUES (6, 'Fault-based testing');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (6, 'Event driven programming model');
    INSERT INTO `TestingLevel` (`idTechnique`, `testingLevel`) VALUES (6, 'System');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (6, 'Control flow');
    INSERT INTO `Input` (`idTechnique`, `input`) VALUES (6, 'Android applications');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (6, 'Number of data races reported');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (6, 'Number of reports generated by DROIDRACER');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (6, 'Number of true and false positives');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (6, 'Performance');
    INSERT INTO `TypeOfStudy` (`idTechnique`, `typeOfStudy`) VALUES (6, 'Case study');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (6, 'Dynamic');
    INSERT INTO `ConcurrentParadigm` (`idTechnique`, `concurrentParadigm`) VALUES (6, 'Shared memory');
    INSERT INTO `ReplayMechanism` (`idTechnique`, `replayMechanism`) VALUES (6, 'Happens-before relations');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (6, 'Happens-before graph');
    INSERT INTO `Instrumentation` (`idTechnique`, `instrumentation`) VALUES (6, 'Droidracer instrumentation');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (6, 'Android runtime enviroments to reduce false positives');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (6, 'Data race');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (6, 'No Information');
    INSERT INTO `Cost` (`idTechnique`, `cost`) VALUES (6, 'No Information');
    INSERT INTO `PlatformTool` (`idTechnique`, `platformTool`) VALUES (6, 'Android');

    -- ID 7
    INSERT INTO `Technique` (`id`, `title` , `year`, `bibTex`, `link`, `needApproval`, `insertedBy`, `insertedOn`) VALUES (7, 'Test-Data Generation for Testing Parallel Real-Time Systems', '2013', '\"@inproceedings{95,\r\n author = {Muhammad Waqar Aziz and\r\n Syed Abdul Baqi Shah},\r\n title = {Test-Data Generation for Testing Parallel Real-Time Systems},\r\n booktitle = {Testing Software and Systems - 27th {IFIP} {WG} 6.1 International\r\n Conference, {ICTSS} 2015, Sharjah and Dubai, United Arab Emirates,\r\n November 23-25, 2015, Proceedings},\r\n pages = {211--223},\r\n year = {2015},\r\n crossref = {DBLP:conf/pts/2015},\r\n url = {http://dx.doi.org/10.1007/978-3-319-25945-1_13},\r\n doi = {10.1007/978-3-319-25945-1_13},\r\n timestamp = {Mon, 09 Nov 2015 13:21:44 +0100},\r\n biburl = {http://dblp2.uni-trier.de/rec/bib/conf/pts/AzizS15},\r\n bibsource = {dblp computer science bibliography, http://dblp.org}\r\n}\"', 'link.springer.com/chapter/10.1007/978-3-319-25945-1_13', 1, 'admin', '2017-07-30 12:21:49');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (7, 'Unix');
    INSERT INTO `ExecutionPlatform` (`idTechnique`, `executionPlatform`) VALUES (7, 'Linux');
    INSERT INTO `Objective` (`idTechnique`, `objective`) VALUES (7, 'HPC');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (7, 'C');
    INSERT INTO `ProgrammingLanguage` (`idTechnique`, `programmingLanguage`) VALUES (7, 'Pthread');
    INSERT INTO `TestingTechnique` (`idTechnique`, `testingTechnique`) VALUES (7, 'Functional testing');
    INSERT INTO `TestDataGeneration` (`idTechnique`, `testDataGeneration`) VALUES (7, 'Search based testing');
    INSERT INTO `TestingLevel` (`idTechnique`, `testingLevel`) VALUES (7, 'System');
    INSERT INTO `SynchronizationMechanism` (`idTechnique`, `synchronizationMechanism`) VALUES (7, 'Worst case execution time');
    INSERT INTO `Input` (`idTechnique`, `input`) VALUES (7, 'Real-time systems');
    INSERT INTO `Output` (`idTechnique`, `output`) VALUES (7, 'End-to-end execution time');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (7, 'Performance');
    INSERT INTO `QualityAttribute` (`idTechnique`, `qualityAttribute`) VALUES (7, 'Scalability');
    INSERT INTO `TypeOfStudy` (`idTechnique`, `typeOfStudy`) VALUES (7, 'Case study');
    INSERT INTO `TestingAnalysis` (`idTechnique`, `testingAnalysis`) VALUES (7, 'Static');
    INSERT INTO `ConcurrentParadigm` (`idTechnique`, `concurrentParadigm`) VALUES (7, 'Shared memory');
    INSERT INTO `ReplayMechanism` (`idTechnique`, `replayMechanism`) VALUES (7, 'No Information');
    INSERT INTO `ProgramRepresentation` (`idTechnique`, `programRepresentation`) VALUES (7, 'No Information');
    INSERT INTO `Instrumentation` (`idTechnique`, `instrumentation`) VALUES (7, 'No Information');
    INSERT INTO `StateSpaceReduction` (`idTechnique`, `stateSpaceReduction`) VALUES (7, 'GA algorithm');
    INSERT INTO `ConcurrentBugs` (`idTechnique`, `concurrentBugs`) VALUES (7, 'Bugs inserted by the researcher');
    INSERT INTO `ToolName` (`idTechnique`, `toolName`) VALUES (7, 'No Information');
    INSERT INTO `Cost` (`idTechnique`, `cost`) VALUES (7, 'No Information');
    INSERT INTO `PlatformTool` (`idTechnique`, `platformTool`) VALUES (7, 'Linux');


    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTechnique`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTechnique`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTechnique` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `title` VARCHAR(255) NOT NULL,
      `insertedBy` VARCHAR(128) NOT NULL DEFAULT 'admin',
      `insertedOn` DATETIME NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC))
    ENGINE = InnoDB;


    -- -----------------------------------------------------
    -- Table `dbo`.`ResultExecutionPlatform`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultExecutionPlatform`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultExecutionPlatform` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `executionPlatform` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_1`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultObjective`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultObjective`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultObjective` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `objective` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_2`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultProgrammingLanguage`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultProgrammingLanguage`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultProgrammingLanguage` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `programmingLanguage` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_3`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTestingTechnique`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTestingTechnique`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTestingTechnique` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `testingTechnique` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_4`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTestDataGeneration`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTestDataGeneration`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTestDataGeneration` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `testDataGeneration` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_5`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTestingLevel`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTestingLevel`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTestingLevel` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `testingLevel` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_6`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultSynchronizationMechanism`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultSynchronizationMechanism`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultSynchronizationMechanism` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `synchronizationMechanism` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_7`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultInput`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultInput`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultInput` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `input` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_8`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultOutput`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultOutput`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultOutput` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `output` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_9`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultQualityAttribute`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultQualityAttribute`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultQualityAttribute` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `qualityAttribute` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_10`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTypeOfStudy`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTypeOfStudy`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTypeOfStudy` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `typeOfStudy` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_11`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultTestingAnalysis`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultTestingAnalysis`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultTestingAnalysis` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `testingAnalysis` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_12`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultConcurrentParadigm`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultConcurrentParadigm`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultConcurrentParadigm` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `concurrentParadigm` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_13`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultReplayMechanism`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultReplayMechanism`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultReplayMechanism` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `replayMechanism` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_14`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultProgramRepresentation`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultProgramRepresentation`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultProgramRepresentation` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `programRepresentation` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_15`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    -- -----------------------------------------------------
    -- Table `dbo`.`ResultInstrumentation`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultInstrumentation`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultInstrumentation` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `instrumentation` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_16`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultStateSpaceReduction`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultStateSpaceReduction`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultStateSpaceReduction` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `stateSpaceReduction` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_17`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultConcurrentBugs`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultConcurrentBugs`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultConcurrentBugs` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `concurrentBugs` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_18`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultToolName`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultToolName`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultToolName` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `toolName` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_19`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultCost`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultCost`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultCost` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `cost` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_20`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;

    -- -----------------------------------------------------
    -- Table `dbo`.`ResultPlatformTool`
    -- -----------------------------------------------------
    DROP TABLE IF EXISTS `dbo`.`ResultPlatformTool`; 

    CREATE TABLE IF NOT EXISTS `dbo`.`ResultPlatformTool` (
      `id` INT NOT NULL AUTO_INCREMENT,
      `idTechniqueResult` INT NOT NULL,
      `PlatformTool` VARCHAR(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE INDEX `id_UNIQUE` (`id` ASC),
      INDEX `idTechniqueResult_idx` (`idTechniqueResult` ASC),
      CONSTRAINT `idTechniqueResult_21`
        FOREIGN KEY (`idTechniqueResult`)
        REFERENCES `dbo`.`ResultTechnique` (`id`)
        ON DELETE CASCADE
        ON UPDATE CASCADE)
    ENGINE = InnoDB;


    -- CHECKS
    SET SQL_MODE=@OLD_SQL_MODE;
    SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
    SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;